{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","role","text","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","type","msg","Navbar","mode","href","title","id","aboutText","onChange","toggleMode","htmlFor","TextForm","useState","setText","heading","placeholder","value","event","target","rows","split","filter","item","length","onClick","newText","showAlert","navigator","clipboard","writeText","About","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","style","border","defaultProps","App","setMode","setAlert","message","console","log","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7be5995a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Alert(props){\r\n    const capitalize = (text) => {\r\n\t\tconst lower = text.toLowerCase();\r\n\t\treturn lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\t}\r\n    return (\r\n        props.alert && <div>\r\n            <div className=\"alert alert-success\" role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}: </strong>{props.alert.msg}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props){\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"mode\" onChange={props.toggleMode} />\r\n                        <label className=\"form-check-label\" htmlFor=\"mode\">{props.mode === 'light' ? 'Enable' : 'Disable'} Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set Title Here',\r\n    aboutText: 'About text here'\r\n}","import React, {useState} from 'react';\r\n\r\nexport default function TextForm(props){\r\n\r\n    const [text, setText] = useState('');\r\n    \r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const upperCase = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n\t\tprops.showAlert(\"Text converted to Upper Case.\", \"success\");\r\n\r\n    }\r\n    const lowerCase = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n\t\tprops.showAlert(\"Text converted to Lower Case.\", \"success\");\r\n    }\r\n    const copyText = (event) => {\r\n        navigator.clipboard.writeText(text);\r\n\t\tprops.showAlert(\"Text Coppied successfully.\", \"success\");\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container my-3\">\r\n            <div className=\"mb-3\">\r\n                <h1>{props.heading}</h1>\r\n                <textarea className=\"form-control\" id=\"myBox\" placeholder=\"Enter text here\" value={text} onChange={handleOnChange} rows=\"8\"></textarea>\r\n            </div>\r\n            <p>{text.split(\" \").filter(item => item).length} Words, {text.length} Characters</p>\r\n            <button className=\"btn btn-primary mx-2\" onClick={upperCase}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={lowerCase}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={copyText}>Coppy</button>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\n\r\nexport default function About(){\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    });\r\n    const [btnText, setBtnText] = useState('Enable Dark Mode');\r\n\r\n    const toggleMode = () => {\r\n        if(myStyle.color === \"white\"){\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            });\r\n            setBtnText('Enable Dark Mode');\r\n        }else{\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            });\r\n            setBtnText('Enable White Mode');\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container my-3\" style={myStyle}>\r\n            <h1>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-primary my-3\" onClick={toggleMode}>{btnText}</button>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About'\n\n// import {\n// \tBrowserRouter as Router,\n// \tSwitch,\n// \tRoute,\n// \tLink,\n// \tuseRouteMatch,\n// \tuseParams\n// } from \"react-router-dom\";\n\nfunction App() {\n\tconst [mode, setMode] = useState('light');\n\tconst [alert, setAlert] = useState(null);\n\n\tconst toggleMode = () => {\n\t\tif(mode === 'light'){\n\t\t\tsetMode('dark');\n\t\t\tdocument.body.style.backgroundColor = 'gray';\n\t\t\tshowAlert(\"Dark Mode enabled sucessfully.\", \"success\");\n\t\t}else{\n\t\t\tsetMode('light');\n\t\t\tdocument.body.style.backgroundColor = 'white';\n\t\t\tshowAlert(\"Light Mode enabled sucessfully.\", \"success\");\n\t\t}\n\t};\n\tconst showAlert = (message, type) => {\n\t\tconsole.log();\n\t\tsetAlert({\n\t\t\tmsg: message,\n\t\t\ttype: type\n\t\t});\n\t\tsetTimeout(() => {\n\t\t\tsetAlert(null);\n\t\t}, 1500);\n\t};\n\treturn (\n\t\t<>\n\t\t{/* <Router> */}\n\t\t\t<Navbar title=\"TextUtil\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>\n\t\t\t<Alert alert={alert}/>\n\n\t\t\t{/* <Switch> */}\n\t\t\t\t{/* <Route exact path=\"/\"> */}\n\t\t\t\t\t<TextForm heading=\"Enter the text to analyze\" showAlert={showAlert}/>\n\t\t\t\t{/* </Route> */}\n\t\t\t\t{/* <Route exact path=\"/about\"> */}\n\t\t\t\t\t<About />\n\t\t\t\t{/* </Route> */}\n\t\t\t{/* </Switch> */}\n\t\t{/* </Router> */}\n\t\t</>\n  \t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}